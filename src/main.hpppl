CONST KEY_ESC := 4;

CONST FPS := 30;
CONST FRAME_TIME := 1 / FPS;

CONST NO_CHANGE := 0;
CONST BLACK := 1;
CONST WHITE := 2;

EXPORT MAIN()
BEGIN
  LOCAL nextTick_ms := TICKS();
  LOCAL frame = 1;

  RECT(RGB(0, 0, 0));

  WHILE true DO
    IF ISKEYDOWN(KEY_ESC) THEN
      KILL;
    END;

    IF frame > SIZE(FRAMES) THEN
      FREEZE;
    END;

    LOCAL tickTime_ms := TICKS();
    nextTick_ms := nextTick_ms + FRAME_TIME * 1000;
    LOCAL sleep_s := 0.001 * (nextTick_ms - tickTime_ms);

    if sleep_s > 0 THEN
      WAIT(sleep_s);
    ELSE
      nextTick_ms = tickTime_ms;
    END;

    LOCAL frameData := FRAMES[frame];
    LOCAL frameDataLength := SIZE(frameData) / 2;
    LOCAL i := 1;
    LOCAL x := 0;
    LOCAL y := 0;

    WHILE i <= frameDataLength DO
      LOCAL delta := frameData(i * 2 - 1);
      LOCAL chunkSize := frameData(i * 2);

      IF delta == NO_CHANGE THEN
        x := x + chunkSize;
        y := y + FLOOR(x / 319);
        x := x MOD 319;

        // skip the while loop
        chunkSize := 0;
      END;

      WHILE chunkSize > 0 DO
        LOCAL usableChunkSize := MIN(319 - x, chunkSize);

        IF delta == BLACK THEN
          LINE_P(x, y, x + usableChunkSize, y, RGB(0, 0, 0));
        END;
        IF delta == WHITE THEN
          LINE_P(x, y, x + usableChunkSize, y, RGB(255, 255, 255));
        END;

        chunkSize := chunkSize - usableChunkSize;
        x := x + usableChunkSize;

        IF x == 319 THEN
          y := y + 1;
          x := 0;
        END;
      END;

      i := i + 1;
    END;

    frame := frame + 1;
  END;
END;